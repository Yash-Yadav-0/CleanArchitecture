// <auto-generated />
using System;
using CleanArchitecture.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CleanArchitecture.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240828080619_newsixth_migration")]
    partial class newsixth_migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedOnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Picture")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedOnDate = new DateTime(2024, 8, 28, 8, 6, 18, 387, DateTimeKind.Utc).AddTicks(2003),
                            DeletedDate = new DateTime(2024, 8, 28, 8, 6, 18, 387, DateTimeKind.Utc).AddTicks(1931),
                            IsDeleted = false,
                            Name = "Industrial",
                            UpdatedDate = new DateTime(2024, 8, 28, 8, 6, 18, 387, DateTimeKind.Utc).AddTicks(1931)
                        },
                        new
                        {
                            Id = 2,
                            AddedOnDate = new DateTime(2024, 8, 28, 8, 6, 18, 387, DateTimeKind.Utc).AddTicks(2052),
                            DeletedDate = new DateTime(2024, 8, 28, 8, 6, 18, 387, DateTimeKind.Utc).AddTicks(2005),
                            IsDeleted = true,
                            Name = "Sports & Beauty",
                            UpdatedDate = new DateTime(2024, 8, 28, 8, 6, 18, 387, DateTimeKind.Utc).AddTicks(2004)
                        },
                        new
                        {
                            Id = 3,
                            AddedOnDate = new DateTime(2024, 8, 28, 8, 6, 18, 387, DateTimeKind.Utc).AddTicks(2062),
                            DeletedDate = new DateTime(2024, 8, 28, 8, 6, 18, 387, DateTimeKind.Utc).AddTicks(2054),
                            IsDeleted = false,
                            Name = "Books",
                            UpdatedDate = new DateTime(2024, 8, 28, 8, 6, 18, 387, DateTimeKind.Utc).AddTicks(2053)
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedOnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("Priorty")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedOnDate = new DateTime(2024, 8, 28, 8, 6, 18, 389, DateTimeKind.Utc).AddTicks(4539),
                            DeletedDate = new DateTime(2024, 8, 28, 8, 6, 18, 389, DateTimeKind.Utc).AddTicks(4535),
                            IsDeleted = false,
                            Name = "Electric",
                            ParentId = 0,
                            Priorty = 1,
                            UpdatedDate = new DateTime(2024, 8, 28, 8, 6, 18, 389, DateTimeKind.Utc).AddTicks(4535)
                        },
                        new
                        {
                            Id = 2,
                            AddedOnDate = new DateTime(2024, 8, 28, 8, 6, 18, 389, DateTimeKind.Utc).AddTicks(4542),
                            DeletedDate = new DateTime(2024, 8, 28, 8, 6, 18, 389, DateTimeKind.Utc).AddTicks(4541),
                            IsDeleted = false,
                            Name = "ElModa",
                            ParentId = 0,
                            Priorty = 2,
                            UpdatedDate = new DateTime(2024, 8, 28, 8, 6, 18, 389, DateTimeKind.Utc).AddTicks(4541)
                        },
                        new
                        {
                            Id = 3,
                            AddedOnDate = new DateTime(2024, 8, 28, 8, 6, 18, 389, DateTimeKind.Utc).AddTicks(4544),
                            DeletedDate = new DateTime(2024, 8, 28, 8, 6, 18, 389, DateTimeKind.Utc).AddTicks(4543),
                            IsDeleted = false,
                            Name = "Computer",
                            ParentId = 1,
                            Priorty = 1,
                            UpdatedDate = new DateTime(2024, 8, 28, 8, 6, 18, 389, DateTimeKind.Utc).AddTicks(4543)
                        },
                        new
                        {
                            Id = 4,
                            AddedOnDate = new DateTime(2024, 8, 28, 8, 6, 18, 389, DateTimeKind.Utc).AddTicks(4550),
                            DeletedDate = new DateTime(2024, 8, 28, 8, 6, 18, 389, DateTimeKind.Utc).AddTicks(4549),
                            IsDeleted = false,
                            Name = "Women",
                            ParentId = 2,
                            Priorty = 1,
                            UpdatedDate = new DateTime(2024, 8, 28, 8, 6, 18, 389, DateTimeKind.Utc).AddTicks(4545)
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Details", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedOnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("details");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedOnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("images");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedOnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<byte>("OrderType")
                        .HasColumnType("smallint");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedOnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedOnDate = new DateTime(2024, 8, 28, 8, 6, 18, 391, DateTimeKind.Utc).AddTicks(5492),
                            BrandId = 1,
                            DeletedDate = new DateTime(2024, 8, 28, 8, 6, 18, 391, DateTimeKind.Utc).AddTicks(5347),
                            Description = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart",
                            Discount = 13.683889594268600m,
                            IsDeleted = false,
                            Price = 1813.51m,
                            Title = "Practical Rubber Keyboard",
                            UpdatedDate = new DateTime(2024, 8, 28, 8, 6, 18, 391, DateTimeKind.Utc).AddTicks(5347)
                        },
                        new
                        {
                            Id = 2,
                            AddedOnDate = new DateTime(2024, 8, 28, 8, 6, 18, 391, DateTimeKind.Utc).AddTicks(5519),
                            BrandId = 1,
                            DeletedDate = new DateTime(2024, 8, 28, 8, 6, 18, 391, DateTimeKind.Utc).AddTicks(5494),
                            Description = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart",
                            Discount = 15.038294025563400m,
                            IsDeleted = false,
                            Price = 970.75m,
                            Title = "Tasty Fresh Chair",
                            UpdatedDate = new DateTime(2024, 8, 28, 8, 6, 18, 391, DateTimeKind.Utc).AddTicks(5493)
                        },
                        new
                        {
                            Id = 3,
                            AddedOnDate = new DateTime(2024, 8, 28, 8, 6, 18, 391, DateTimeKind.Utc).AddTicks(5548),
                            BrandId = 3,
                            DeletedDate = new DateTime(2024, 8, 28, 8, 6, 18, 391, DateTimeKind.Utc).AddTicks(5520),
                            Description = "Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles",
                            Discount = 33.178499799026160m,
                            IsDeleted = true,
                            Price = 1495.04m,
                            Title = "Gorgeous Metal Hat",
                            UpdatedDate = new DateTime(2024, 8, 28, 8, 6, 18, 391, DateTimeKind.Utc).AddTicks(5520)
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ProductsCategories", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("productsCategories");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ProductsOrders", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("orderProducts");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Rating", b =>
                {
                    b.Property<Guid>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DislikeCount")
                        .HasColumnType("integer");

                    b.Property<int>("LikeCount")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RatingId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ratings");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d24e2067-471f-4a8d-8d13-72f4a57b8f32"),
                            ConcurrencyStamp = "edd5ca22-b0cc-4a2b-b817-8dc46de707d8",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN",
                            Permissions = -1
                        },
                        new
                        {
                            Id = new Guid("6b03a8e9-d90e-404d-b1a7-51ed6702f4be"),
                            ConcurrencyStamp = "112d11bc-9fe4-4e41-a215-e01eb6d9ad72",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Permissions = 56
                        },
                        new
                        {
                            Id = new Guid("3f72b4a3-bc5c-4464-9b22-cb8197745345"),
                            ConcurrencyStamp = "6fca332c-5d9b-465d-ae83-39546e74f214",
                            Name = "Vendor",
                            NormalizedName = "VENDOR",
                            Permissions = 48
                        },
                        new
                        {
                            Id = new Guid("2e4d5f86-82ab-41c5-bbc3-d21e8f0b8a2c"),
                            ConcurrencyStamp = "b56cfcdc-2d16-42fa-b28b-30c1f932c98a",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER",
                            Permissions = 96
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("CodeForResetPassword")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsCodeOfResetPasswordTrue")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Picture")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TimeOfCodeExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f87441a-8951-4535-a9c6-f4e3073ab1d7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e82b1632-39ae-4df8-be36-005ab707f670",
                            Email = "superadmin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "SuperAdmin User",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAV2jpyyf/CumcvhCxivo9uMSs/wKcwSeC556GGAv3MADr93vDECp3G9dgs8eOyt/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ZZZLCDPUZ2CY6CYAEPQLQ6O6DDDFRDE",
                            TwoFactorEnabled = false,
                            UserName = "SuperAdminUser"
                        },
                        new
                        {
                            Id = new Guid("3f42b4a3-bc5c-4464-9b22-cb819774539f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc830f49-cb83-4c76-8267-ba596b51cb10",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIxDDO2nnhjTwNhf5zOa6ZkUPkllbQW7Qm+ka5EkoXGoZDYd+JlgRq3BSVNBqihgzA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ZZZLCDPUZ2CY6CYAEPQLQ6O6WEROFTD",
                            TwoFactorEnabled = false,
                            UserName = "AdminUser"
                        },
                        new
                        {
                            Id = new Guid("8c528156-1623-41f9-bf02-d5e47a4a66d4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d94c7e6-ff3b-4a9f-8347-088a624cfcd2",
                            Email = "vendor@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Vendor User",
                            LockoutEnabled = false,
                            NormalizedEmail = "VENDOR@GMAIL.COM",
                            NormalizedUserName = "VENDOR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA6YoDM0V6hrMt//qkjTdrnVbr0ig7Xn2W1tVZ/1pIl4mHUzsKUemOtpz/VBWOlGSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ZZZLCDPUZ2CY6CYAEPQLQ6O6IPXFJRU",
                            TwoFactorEnabled = false,
                            UserName = "VendorUser"
                        },
                        new
                        {
                            Id = new Guid("9f83774d-1822-47a3-9e6e-0a6f89bcb7c7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94402dac-8b9f-4bac-9a43-510d6e86d433",
                            Email = "customer@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Customer User",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@GMAIL.COM",
                            NormalizedUserName = "CUSTOMER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMQ3jcg7SUo+3be4AMSMBOl/Rb8Yb+MaqLg4bPGv0gRe0jtdHxBjM+p4P/o02kquMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ZZZLCDPUZ2CY6CYAEPQLQ6O6IPWOSKT",
                            TwoFactorEnabled = false,
                            UserName = "CustomerUser"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("5f87441a-8951-4535-a9c6-f4e3073ab1d7"),
                            RoleId = new Guid("d24e2067-471f-4a8d-8d13-72f4a57b8f32")
                        },
                        new
                        {
                            UserId = new Guid("3f42b4a3-bc5c-4464-9b22-cb819774539f"),
                            RoleId = new Guid("6b03a8e9-d90e-404d-b1a7-51ed6702f4be")
                        },
                        new
                        {
                            UserId = new Guid("8c528156-1623-41f9-bf02-d5e47a4a66d4"),
                            RoleId = new Guid("3f72b4a3-bc5c-4464-9b22-cb8197745345")
                        },
                        new
                        {
                            UserId = new Guid("9f83774d-1822-47a3-9e6e-0a6f89bcb7c7"),
                            RoleId = new Guid("2e4d5f86-82ab-41c5-bbc3-d21e8f0b8a2c")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Vendor", b =>
                {
                    b.HasBaseType("CleanArchitecture.Domain.Entities.User");

                    b.HasDiscriminator().HasValue("Vendor");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Details", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Category", "Category")
                        .WithMany("Details")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Image", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Product", "Product")
                        .WithMany("images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Order", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Product", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Brand", "Brand")
                        .WithMany("products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ProductsCategories", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Category", "Category")
                        .WithMany("ProductsCategory")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.Product", "Product")
                        .WithMany("ProductsCategory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ProductsOrders", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Order", "Order")
                        .WithMany("ProductsOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.Product", "product")
                        .WithMany("ProductsOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("product");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Rating", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Product", "Product")
                        .WithMany("Ratings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Brand", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Category", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("ProductsCategory");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Order", b =>
                {
                    b.Navigation("ProductsOrders");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductsCategory");

                    b.Navigation("ProductsOrders");

                    b.Navigation("Ratings");

                    b.Navigation("images");
                });
#pragma warning restore 612, 618
        }
    }
}
